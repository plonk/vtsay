#!/usr/bin/ruby --disable-gems
APP_NAME = 'vtsay'
APP_VERSION = "0.1.0"
DEFAULT_FORMAT = 'wav'

API_OPTIONS = %w[text speaker format emotion emotion_level pitch speed volume]

PLAYER_TO_TYPES = {
  "play -q" => ["ogg", "wav"],
  "aplay -q" => ["wav"],
  "paplay" => ["ogg", "wav"],
}
TYPE_TO_PLAYERS = {}
PLAYER_TO_TYPES.each do |pl,types|
  types.each do |t|
    TYPE_TO_PLAYERS[t] ||= []
    TYPE_TO_PLAYERS[t] << pl
  end
end

class UsageError < Exception
end

def esc(str)
  res = ""
  str.each_char do |c|
    case c
    when '0'..'9', 'a'..'z', 'A'..'Z', '_', '-', '.'
      res.concat(c)
    when ' '
      res.concat('+')
    else
      c.force_encoding('ASCII-8BIT').each_char do |d|
        res.concat("%%%02X" % d.ord)
      end
    end
  end
  return res
end

def get_api_key
  path = File.join(ENV['HOME'], '.voiceapi')
  stat = File.stat(path)
  if stat.uid == Process::Sys.getuid
    # check permissions
    if (stat.mode & 07777) > 0600
      curmode = "%04o" % (stat.mode & 07777)
      STDERR.puts("#{path}: Insecure permissions #{curmode}, 0600 suggested")
    end
  end
  api = File.read(path).chomp
  return api
end

def parse_options!(argv)
  opts = {}
  rest = []
  until argv.empty?
    s = argv.shift
    case s
    when "--"
      rest.concat(argv)
      break
    when "-v"
      if argv.empty?
        fail UsageError, "-v requires parameter"
      end
      opts['speaker'] = argv.shift
    when "-o"
      if argv.empty?
        fail UsageError, "-o requires parameter"
        exit 1
      end
      opts['output'] = argv.shift
    when "-f"
      if argv.empty?
        fail UsageError, "-f requires parameter"
      end
      opts['text'] = File.read(argv.shift)
    when "--help"
      print_usage
      exit 0
    when "--debug"
      $DEBUG = true
    when "--version"
      print_version
      exit 0
    when /\A--([^=]+)=(.*)\z/
      origname = $1
      value = $2
      name = origname.gsub('-','_')
      if API_OPTIONS.include?(name)
        opts[name] = value
      else
        fail UsageError, "No such option #{name.inspect}"
      end
    when /\A-/
      fail UsageError, "No such option #{s.inspect} (Use -- to separate options from speech text)"
    else
      rest << s
    end
  end
  argv.replace(rest)
  return opts
end

def get_response_code!(headers)
  headers.rewind
  _, code, _ = headers.gets.split(/\s+/, 3)
  return code.to_i
end

def run_curl(headers, content, opts, api_key)
  res = system("curl",
               "https://api.voicetext.jp/v1/tts",
               "-s",
               "-D", headers.path,
               "-u", api_key + ":",
               *opts.flat_map { |k,v| ["-d", "#{k}=#{esc(v)}"] },
               "-o", content.path)
  case res
  when nil
    STDERR.puts("Error: Failed to run 'curl'")
    exit 1
  when false
    STDERR.puts("Error: 'curl' exited with status code #{$?.exit_status}")
    exit 1
  end
end

def filetype(fn)
  case File.extname(fn).downcase
  when '.wav'
    'wav'
  when '.ogg', '.oga'
    'ogg'
  when '.mp3'
    'mp3'
  end
end

def print_usage
  STDERR.puts <<"EOD"
Usage: #{APP_NAME} [-v voice] [-o out.wav] [-f file.in | string ...]

-v [show|haruka|hikari|takeru|santa|bear]
-o outfile
-f infile

--speaker=[show|haruka|hikari|takeru|santa|bear]
--format=[ogg|wav|mp3] (defaults to ogg)
--emotion=[happiness|anger|sadness] (only for haruka, hikari, takeru, santa, or bear)
--emotion-level=NUMBER (range 1-4, also --emotion_level)
--pitch=NUMBER (percentage, range 50-200)
--speed=NUMBER (percentage, range 50-400)
--volume=NUMBER (percentage, range 50-200)

--debug
        print debug messages
--version
        print version information and exit
--help
        display this help and exit
EOD
end

def print_version
  STDERR.puts "#{APP_NAME} version #{APP_VERSION}"
end

def main
  opts = parse_options!(ARGV)

  if opts["text"].nil? && ARGV.size == 0
    print_usage
    exit 1
  else
    opts["text"] ||= ARGV.join(' ')
    opts["speaker"] ||= "hikari"

    output = opts.delete("output")
    if output
      opts["format"] ||= (filetype(output) || DEFAULT_FORMAT)
    else
      opts["format"] ||= DEFAULT_FORMAT
    end

    begin
      api_key = get_api_key
    rescue Errno::ENOENT => e
      STDERR.puts e.message
      STDERR.puts "API key file not found. You can get your API key at https://cloud.voicetext.jp/webapi"
      exit 1
    rescue Errno::EACCES => e
      STDERR.puts e.message
      exit 1
    end

    require 'tempfile'
    if output
      content = File.open(output, "w+")
    else
      content = Tempfile.new(APP_NAME)
    end
    headers = Tempfile.new(APP_NAME)
    begin
      run_curl(headers, content, opts, api_key)
      code = get_response_code!(headers)
      case code
      when 200
        unless output
          players = TYPE_TO_PLAYERS[opts["format"]]
          if players
            players.each do |player|
              STDERR.print "Executing %p ... " % [[*player.split, content.path]] if $DEBUG
              res = system(*player.split, content.path, :err => "/dev/null")
              STDERR.puts "%p" % [res] if $DEBUG
              break if res
            end
          else
            STDERR.puts("Error: No players for type #{opts['format']} are found.")
          end
        end
      else
        content.rewind
        STDERR.puts(content.read)
      end
    ensure
      content.close
      content.unlink if content.is_a?(Tempfile)
      headers.close
      headers.unlink
    end
  end
rescue UsageError => e
  STDERR.puts e.message
  print_usage
  exit 1
end

main
